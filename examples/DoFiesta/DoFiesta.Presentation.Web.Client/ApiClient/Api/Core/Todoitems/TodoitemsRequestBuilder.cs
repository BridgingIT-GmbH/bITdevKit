// <auto-generated/>
#pragma warning disable CS0618
using BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Actions;
using BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Item;
using BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Search;
using BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems
{
    /// <summary>
    /// Builds and executes requests for operations under \api\core\todoitems
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TodoitemsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The actions property</summary>
        public global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Actions.ActionsRequestBuilder Actions
        {
            get => new global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Actions.ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Search.SearchRequestBuilder Search
        {
            get => new global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.api.core.todoitems.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Item.TodoitemsItemRequestBuilder"/></returns>
        public global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Item.TodoitemsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.Item.TodoitemsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TodoitemsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/core/todoitems{?filter*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TodoitemsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/core/todoitems{?filter*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets all items matching the specified filter criteria.
        /// </summary>
        /// <returns>A List&lt;global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.ResultProblemDetails">When receiving a 400 status code</exception>
        /// <exception cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.ResultProblemDetails">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel>?> GetAsync(Action<RequestConfiguration<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder.TodoitemsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel>> GetAsync(Action<RequestConfiguration<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder.TodoitemsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.ResultProblemDetails.CreateFromDiscriminatorValue },
                { "500", global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.ResultProblemDetails.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel>(requestInfo, global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates a new TodoItem with the specified details.
        /// </summary>
        /// <returns>A <see cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.ResultProblemDetails">When receiving a 400 status code</exception>
        /// <exception cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.ResultProblemDetails">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel?> PostAsync(global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel> PostAsync(global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.ResultProblemDetails.CreateFromDiscriminatorValue },
                { "500", global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.ResultProblemDetails.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel>(requestInfo, global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets all items matching the specified filter criteria.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder.TodoitemsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder.TodoitemsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new TodoItem with the specified details.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Models.TodoItemModel body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets all items matching the specified filter criteria.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TodoitemsRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TodoitemsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::BridgingIT.DevKit.Examples.DoFiesta.Presentation.Gen.Api.Core.Todoitems.TodoitemsRequestBuilder.TodoitemsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TodoitemsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
