{
  "openapi": "3.0.1",
  "info": {
    "title": "BridgingIT.DevKit.Examples.DoFiesta.Presentation.Web.Server | v1",
    "version": "1.0.0"
  },
  "paths": {
    "/api/core/todoitems/{id}": {
      "get": {
        "tags": [
          "Core.TodoItems"
        ],
        "description": "Gets a single TodoItem by its unique identifier.",
        "operationId": "Core.TodoItems.GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoItemModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Core.TodoItems"
        ],
        "description": "Updates an existing TodoItem with the specified details.",
        "operationId": "Core.TodoItems.Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoItemModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoItemModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Core.TodoItems"
        ],
        "description": "Deletes the specified TodoItem.",
        "operationId": "Core.TodoItems.Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/todoitems": {
      "get": {
        "tags": [
          "Core.TodoItems"
        ],
        "description": "Gets all items matching the specified filter criteria.",
        "operationId": "CoreModule.TodoItems.GetAll",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FilterModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TodoItemModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Core.TodoItems"
        ],
        "description": "Creates a new TodoItem with the specified details.",
        "operationId": "Core.TodoItems.Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoItemModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoItemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/todoitems/search": {
      "post": {
        "tags": [
          "Core.TodoItems"
        ],
        "description": "Searches for items matching the specified filter criteria.",
        "operationId": "CoreModule.TodoItems.Search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TodoItemModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/todoitems/actions/completeall": {
      "post": {
        "tags": [
          "Core.TodoItems"
        ],
        "description": "Marks all TodoItems as completed.",
        "operationId": "Core.TodoItems.CompleteAll",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/enumerations": {
      "get": {
        "tags": [
          "Core.Enumerations"
        ],
        "operationId": "Core.Enumerations.GetAll",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumerationModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CompositeSpecification": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecificationNode"
            },
            "description": "List of specification nodes",
            "nullable": true
          }
        },
        "nullable": true
      },
      "EnumerationModel": {
        "type": "object",
        "properties": {
          "todoStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TodoStatus"
            },
            "nullable": true
          },
          "todoPriorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TodoPriority"
            },
            "nullable": true
          },
          "subscriptionStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionStatus"
            },
            "nullable": true
          },
          "subscriptionPlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionPlan"
            },
            "nullable": true
          },
          "subscriptionBillingCycles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionBillingCycle"
            },
            "nullable": true
          }
        }
      },
      "FilterCriteria": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "The field to filter on",
            "nullable": true
          },
          "operator": {
            "enum": [
              "eq",
              "neq",
              "isnull",
              "isnotnull",
              "isempty",
              "isnotempty",
              "gt",
              "gte",
              "lt",
              "lte",
              "contains",
              "doesnotcontain",
              "startswith",
              "doesnotstartwith",
              "endswith",
              "doesnotendwith",
              "any",
              "all",
              "none"
            ],
            "type": "string",
            "description": "The operator to use for filtering"
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "array",
                "items": { }
              },
              {
                "type": "object"
              }
            ],
            "description": "The value to compare against (any type)",
            "nullable": true
          },
          "logic": {
            "enum": [
              "and",
              "or"
            ],
            "type": "string",
            "description": "Logic operator for combining nested filters",
            "default": "and"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterCriteria"
            },
            "description": "Nested filter criteria",
            "nullable": true
          },
          "customType": {
            "enum": [
              "none",
              "fulltextsearch",
              "daterange",
              "daterelative",
              "timerange",
              "timerelative",
              "numericrange",
              "isnull",
              "isnotnull",
              "enumvalues",
              "textin",
              "textnotin",
              "numericin",
              "numericnotin",
              "namedspecification",
              "compositespecification"
            ],
            "type": "string",
            "description": "Custom filter type",
            "default": "none"
          },
          "customParameters": {
            "type": "object",
            "description": "Custom parameters for the filter",
            "nullable": true
          },
          "specificationName": {
            "type": "string",
            "description": "Name of a registered specification",
            "nullable": true
          },
          "specificationArguments": {
            "type": "array",
            "items": { },
            "description": "Arguments for the specification",
            "nullable": true
          },
          "compositeSpecification": {
            "$ref": "#/components/schemas/CompositeSpecification"
          }
        },
        "nullable": true
      },
      "FilterModel": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "The page number for pagination (1-based)",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of items per page",
            "format": "int32"
          },
          "noTracking": {
            "type": "boolean",
            "description": "Disable change tracking for improved query performance"
          },
          "orderings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOrderCriteria"
            },
            "description": "Sort criteria to apply to the results",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterCriteria"
            },
            "description": "Filter criteria to apply to the query",
            "nullable": true
          },
          "includes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Related entities to include via eager loading",
            "nullable": true
          },
          "hierarchy": {
            "type": "string",
            "description": "Navigation property for hierarchical queries",
            "nullable": true
          },
          "hierarchyMaxDepth": {
            "type": "integer",
            "description": "Maximum depth for hierarchical data loading",
            "format": "int32"
          },
          "_FilterCriteriaSchema": {
            "$ref": "#/components/schemas/FilterCriteria"
          },
          "_CompositeSpecificationSchema": {
            "$ref": "#/components/schemas/CompositeSpecification"
          },
          "_SpecificationNodeSchema": {
            "$ref": "#/components/schemas/SpecificationNode"
          }
        }
      },
      "FilterOrderCriteria": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/OrderDirection"
          }
        }
      },
      "OrderDirection": {
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "Order direction"
      },
      "ProblemError": {
        "type": "object",
        "additionalProperties": { }
      },
      "ResultProblemData": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ResultProblemResult"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemError"
            },
            "nullable": true
          }
        },
        "additionalProperties": { },
        "nullable": true
      },
      "ResultProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/ResultProblemData"
          }
        },
        "additionalProperties": { }
      },
      "ResultProblemError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ResultProblemResult": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultProblemError"
            },
            "nullable": true
          }
        },
        "nullable": true
      },
      "SpecificationNode": {
        "description": "Base specification node (polymorphic): SpecificationLeaf or SpecificationGroup",
        "nullable": true
      },
      "SubscriptionBillingCycle": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "autoRenew": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SubscriptionPlan": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "$ref": "#/components/schemas/SubscriptionPlanDetails"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SubscriptionPlanDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "pricePerMonth": {
            "type": "number",
            "format": "double"
          },
          "maxTodos": {
            "type": "integer",
            "format": "int32"
          },
          "maxUsersPerTodo": {
            "type": "integer",
            "format": "int32"
          },
          "allowsRecurring": {
            "type": "boolean"
          },
          "allowsAttachments": {
            "type": "boolean"
          },
          "allowsTemplates": {
            "type": "boolean"
          },
          "maxProjects": {
            "type": "integer",
            "format": "int32"
          },
          "allowsComments": {
            "type": "boolean"
          }
        },
        "nullable": true
      },
      "SubscriptionStatus": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TodoItemModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "orderIndex": {
            "type": "integer",
            "format": "int32"
          },
          "assignee": {
            "type": "string",
            "nullable": true
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TodoStepModel"
            },
            "nullable": true
          },
          "concurrencyVersion": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TodoPriority": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TodoStatus": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TodoStepModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "todoItemId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "orderIndex": {
            "type": "integer",
            "format": "int32"
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "oauth2"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ],
  "tags": [
    {
      "name": "Core.TodoItems"
    },
    {
      "name": "Core.Enumerations"
    }
  ]
}