@page "/monitor"
@using System.Diagnostics
@using Microsoft.AspNetCore.Authorization
@implements IDisposable
@inject CircuitMonitorService CircuitMonitor
@inject ServerMonitorService ServerMonitor
@attribute [Authorize]

<MudText Typo="Typo.h4" Class="mb-4">Server Monitor</MudText>

<MudGrid>
    <!-- Server Metrics Card -->
    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6" Class="mb-2">Server Resources</MudText>
            <MudChart ChartType="ChartType.Line"
                        ChartSeries="@_cpuSeries"
                        XAxisLabels="@_timeLabels"
                        Width="100%"
                        Height="200px"/>

            <MudGrid>
                <MudItem xs="6">
                    <MudProgressLinear Color="Color.Primary"
                                        Value="@(_serverMetrics.UsedMemory * 100f / _serverMetrics.TotalMemory)"
                                        Class="my-4">
                        Memory: @_serverMetrics.UsedMemory MB / @_serverMetrics.TotalMemory MB
                    </MudProgressLinear>
                </MudItem>
                <MudItem xs="6">
                    <MudProgressLinear Color="Color.Secondary"
                                        Value="@_serverMetrics.CpuUsage"
                                        Class="my-4">
                        CPU: @_serverMetrics.CpuUsage%
                    </MudProgressLinear>
                </MudItem>
            </MudGrid>

            <MudList Dense="true" T="string">
                <MudListItem>
                    <MudText>Thread Count: @_serverMetrics.ThreadCount</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText>Process Uptime: @_serverMetrics.ProcessUptime.ToString(@"dd\.hh\:mm\:ss")</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText>Memory Usage: @_circuitInfo.MemoryUsage MB</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText>Active Connections: @_serverMetrics.ActiveConnections</MudText>
                </MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>

    <!-- Circuit Information Card -->
    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6" Class="mb-2">Circuit Information</MudText>
            <MudList Dense="true" T="string">
                <MudListItem>
                    <MudText>Circuit ID: @_circuitInfo.CircuitId</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText>Connected Since: @_circuitInfo.ConnectedTime.ToLocalTime().ToString("g")</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText>Uptime: @_circuitInfo.Uptime.ToString(@"hh\:mm\:ss")</MudText>
                </MudListItem>

            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>

<MudAlert Severity="@_connectionStatus" Class="mt-4">
    Connection Status: @_circuitInfo.LastActivity
</MudAlert>

@code {
    private CircuitInfo _circuitInfo = new();
    private ServerMetrics _serverMetrics = new();
    private Severity _connectionStatus = Severity.Success;
    private Timer _updateTimer;

    // For the CPU chart
    private List<ChartSeries> _cpuSeries = new();
    private string[] _timeLabels = new string[60];
    private Queue<double> _cpuHistory = new(60);

    protected override void OnInitialized()
    {
        // Initialize chart data
        _cpuSeries.Add(new ChartSeries { Name = "CPU %", Data = new double[60] });
        for (int i = 0; i < 60; i++)
        {
            _timeLabels[i] = $"-{59 - i}s";
            _cpuHistory.Enqueue(0);
        }

        // Start update timer
        _updateTimer = new Timer(UpdateState, null, 0, 1000);

        CircuitMonitor.OnCircuitInfoUpdated += HandleCircuitUpdate;
    }

    private void UpdateState(object state)
    {
        _serverMetrics = ServerMonitor.GetMetrics();
        _circuitInfo = CircuitMonitor.GetCurrentCircuitInfo();

        // Update CPU history
        _cpuHistory.Dequeue();
        _cpuHistory.Enqueue(_serverMetrics.CpuUsage);
        _cpuSeries[0].Data = _cpuHistory.ToArray();

        InvokeAsync(StateHasChanged);
    }

    private void HandleCircuitUpdate(CircuitInfo info)
    {
        _circuitInfo = info;
        _connectionStatus = info.LastActivity == "Connection Down" ?
            Severity.Error : Severity.Success;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CircuitMonitor.OnCircuitInfoUpdated -= HandleCircuitUpdate;
        _updateTimer?.Dispose();
    }
}
