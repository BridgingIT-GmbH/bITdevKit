@page "/report"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<MudText Typo="Typo.h4" Class="mb-4">Abweichungen</MudText>

<MudGrid Spacing="2">
    <MudItem xs="2">
        <MudSelect T="string" Label="Quartal" Dense="true" Variant="Variant.Text" @bind-Value="selectedQuarter">
            <MudSelectItem Value="@string.Empty"></MudSelectItem>
            @foreach (var quarter in quarters)
            {
                <MudSelectItem Value="@quarter">@quarter</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="2">
        <MudSelect T="string" Label="Vorgangsart" Dense="true" Variant="Variant.Text" @bind-Value="selectedType">
            <MudSelectItem Value="@string.Empty"></MudSelectItem>
            @foreach (var type in types)
            {
                <MudSelectItem Value="@type">@type</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="4">
        <MudTextField @bind-Value="searchString" Style="margin-top: 15px;"
                      Placeholder="Suche"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Small"
                      Variant="Variant.Text" />
    </MudItem>
    <MudItem xs="4" Class="d-flex justify-end">
        <MudButton Variant="Variant.Text"
                   EndIcon="@(showFilters ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                   OnClick="ToggleFilters">
            Weitere Filter
        </MudButton>
    </MudItem>
</MudGrid>

@if (showFilters)
{
    <MudGrid>
        <MudItem xs="3">
            <MudTextField @bind-Value="vknrFilter"
                          Label="VKNR"
                          Variant="Variant.Text"
                          Immediate="true" />
        </MudItem>
        <MudItem xs="3">
            <MudTextField @bind-Value="ikFilter"
                          Label="IK"
                          Variant="Variant.Text"
                          Immediate="true" />
        </MudItem>
        <MudItem xs="3">
            <MudSelect T="string" Label="Dienstleister"
                       @bind-Value="dienstleisterFilter"
                       Variant="Variant.Text">
                <MudSelectItem Value="@string.Empty"></MudSelectItem>
                @foreach (var dl in GetUniqueServiceProviders())
                {
                    <MudSelectItem Value="@dl">@dl</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
}

<div style="overflow-x: auto;">
    <MudTable Items="@_items" Dense="true" Hover="true"
              Bordered="true" Striped="true" Filter="QuickFilter"
              RowsPerPage="10" Style="margin-top: 24px;">
        <HeaderContent>
            <MudTh>VKNR</MudTh>
            <MudTh>IK</MudTh>
            <MudTh>Bestätigung</MudTh>
            <MudTh>Eingangsdatum</MudTh>
            <MudTh>Dienstleister</MudTh>
            <MudTh>Abweichung</MudTh>
            @* <MudTh>Bemerkung</MudTh> *@
            <MudTh>
                <MudIconButton Size="Size.Small"
                               Icon="@(areAllRowsExpanded ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                               OnClick="ToggleAllRows" />
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.VKNR</MudTd>
            <MudTd>@context.IK</MudTd>
            <MudTd>
                @if (string.IsNullOrEmpty(context.Lesebestaetigung))
                {
                    <MudButton Color="Color.Error"
                               Size="Size.Small"
                               Variant="Variant.Filled"
                               OnClick="@(() => ConfirmReading(context))">OK</MudButton>
                }
                else
                {
                    <div class="d-flex align-center gap-2">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                                 Color="Color.Success"
                                 Size="Size.Small" />
                        <MudText>@context.Eingangsdatum.ToShortDateString()</MudText>
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Undo"
                                       OnClick="@(() => UndoReading(context))" />
                    </div>
                }
            </MudTd>
            <MudTd>@context.Eingangsdatum.ToShortDateString()</MudTd>
            <MudTd>@context.Dienstleister</MudTd>
            <MudTd>@context.Abweichung</MudTd>
            @* <MudTd>@context.Bemerkung</MudTd> *@
            <MudTd>
                <MudIconButton Size="Size.Small"
                               Icon="@(context.IsExpanded ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                               OnClick="@(() => ToggleExpand(context))" />
            </MudTd>
        </RowTemplate>
        <ChildRowContent Context="context">
            @if (expandedRows.Contains(context))
            {
                <MudTr>
                    <td colspan="10">
                        <MudGrid Class="pa-4">
                            <MudItem xs="5">
                                <MudText><b>Bemerking:</b> @context.Bemerkung</MudText>
                            </MudItem>
                            <MudItem xs="2">
                                <MudText><b>Version:</b> @context.Version</MudText>
                            </MudItem>
                            <MudItem xs="3">
                                <MudText><b>Person:</b> @context.MitarbeitendePerson</MudText>
                            </MudItem>
                        </MudGrid>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager RowsPerPageString="Zeilen pro Seite:"
                           InfoFormat="{first_item}-{last_item} von {all_items}"
                           PageSizeOptions="new int[] { 10, 25, 50 }" />
        </PagerContent>
    </MudTable>
</div>

@code {
    private bool showFilters;
    private string searchString = string.Empty;
    private string selectedQuarter = string.Empty;
    private string selectedType = string.Empty;
    private string vknrFilter = string.Empty;
    private string ikFilter = string.Empty;
    private string dienstleisterFilter = string.Empty;
    private List<string> types = new() { "FA", "WPR", "FHZ" };
    private List<string> quarters;
    private List<AbweichungModel> _items = new();
    private HashSet<AbweichungModel> expandedRows = new();
    private bool areAllRowsExpanded;

    private void ExpandRow(AbweichungModel item)
    {
        if (expandedRows.Contains(item))
            expandedRows.Remove(item);
        else
            expandedRows.Add(item);
    }

    protected override void OnInitialized()
    {
        quarters = GetLastQuarters(6);
        InitializeItems();
    }

    private List<string> GetUniqueServiceProviders()
    {
        return _items.Select(x => x.Dienstleister).Distinct().OrderBy(x => x).ToList();
    }

    private void UndoReading(AbweichungModel item)
    {
        item.Lesebestaetigung = null;
    }

    private void ToggleExpand(AbweichungModel item)
    {
        item.IsExpanded = !item.IsExpanded;
        expandedRows.Add(item);

        if (!item.IsExpanded)
            expandedRows.Remove(item);
    }

    private void ToggleAllRows()
    {
        areAllRowsExpanded = !areAllRowsExpanded;

        if (areAllRowsExpanded)
        {
            expandedRows = new HashSet<AbweichungModel>(_items);
            foreach (var item in _items)
            {
                item.IsExpanded = true;
            }
        }
        else
        {
            expandedRows.Clear();
            foreach (var item in _items)
            {
                item.IsExpanded = false;
            }
        }
    }

    private Func<AbweichungModel, bool> QuickFilter => x =>
    {
        // Apply dropdown filters
        if (!string.IsNullOrEmpty(selectedQuarter) && x.Quarter != selectedQuarter)
            return false;

        if (!string.IsNullOrEmpty(selectedType) && x.Vorgangsart != selectedType)
            return false;

        if (!string.IsNullOrEmpty(vknrFilter) && !x.VKNR.Contains(vknrFilter, StringComparison.OrdinalIgnoreCase))
            return false;

        if (!string.IsNullOrEmpty(ikFilter) && !x.IK.Contains(ikFilter, StringComparison.OrdinalIgnoreCase))
            return false;

        if (!string.IsNullOrEmpty(dienstleisterFilter) && x.Dienstleister != dienstleisterFilter)
            return false;

        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return x.VKNR.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || x.IK.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || x.Dienstleister.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || x.Abweichung.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || x.Bemerkung.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || x.MitarbeitendePerson.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    };

    public class AbweichungModel
    {
        public string VKNR { get; set; }
        public string IK { get; set; }
        public DateTime Eingangsdatum { get; set; }
        public string Dienstleister { get; set; }
        public string Abweichung { get; set; }
        public string Bemerkung { get; set; }
        public string Version { get; set; }
        public string MitarbeitendePerson { get; set; }
        public string Lesebestaetigung { get; set; }
        public string Quarter { get; set; }
        public string Vorgangsart { get; set; }
        public bool IsExpanded { get; set; }
    }

    private void ToggleFilters()
    {
        showFilters = !showFilters;
    }

    private void ConfirmReading(AbweichungModel item)
    {
        item.Lesebestaetigung = $"Gelesen, {DateTime.Now:dd.MM.yyyy}";
    }

    private List<string> GetLastQuarters(int count)
    {
        var quarters = new List<string>();
        var currentDate = DateTime.Now;
        var currentQuarter = (currentDate.Month - 1) / 3 + 1;
        var currentYear = currentDate.Year;

        for (int i = 0; i < count; i++)
        {
            quarters.Add($"{currentYear}/{currentQuarter}");
            currentQuarter--;
            if (currentQuarter == 0)
            {
                currentQuarter = 4;
                currentYear--;
            }
        }
        return quarters;
    }

    private void InitializeItems()
    {
        _items = new()
        {
            new() {
                VKNR = "02406",
                IK = "101320032",
                Eingangsdatum = DateTime.Parse("09.12.2024"),
                Dienstleister = "GWQ",
                Abweichung = "VKNR",
                Bemerkung = "VKNR unterschied VQ",
                Version = "001",
                MitarbeitendePerson = "Max Mitarbeiter",
                Lesebestaetigung = "Gelesen, 17.02.2025",
                Quarter = "2024/4",
                Vorgangsart = "FA"
            },
            new() {
                VKNR = "02407",
                IK = "104491707",
                Eingangsdatum = DateTime.Parse("09.12.2024"),
                Dienstleister = "DAVASO",
                Abweichung = "Satzart",
                Bemerkung = "L03 fehlt",
                Version = "002",
                MitarbeitendePerson = "---",
                Quarter = "2024/4",
                Vorgangsart = "FA"
            },
            new() {
                VKNR = "02406",
                IK = "103523440",
                Eingangsdatum = DateTime.Parse("09.12.2024"),
                Dienstleister = "DAVASO",
                Abweichung = "IK",
                Bemerkung = "IK unterscheid VJQ",
                Version = "002",
                MitarbeitendePerson = "---",
                Quarter = "2024/4",
                Vorgangsart = "WPR"
            },
            new() {
                VKNR = "2602",
                IK = "105830016",
                Eingangsdatum = DateTime.Parse("09.12.2024"),
                Dienstleister = "DAVASO",
                Abweichung = "Vertragsnummer",
                Bemerkung = "Vertragsnummer unterscheid VQ",
                Version = "002",
                MitarbeitendePerson = "---",
                Quarter = "2024/4",
                Vorgangsart = "FA"
            },
            new() {
                VKNR = "2605",
                IK = "101575519",
                Eingangsdatum = DateTime.Parse("09.12.2024"),
                Dienstleister = "DAVASO",
                Abweichung = "Fehlende DL",
                Bemerkung = "Im Vergleich zu VQ keine Datenlieferung",
                Version = "002",
                MitarbeitendePerson = "---",
                Quarter = "2025/1",
                Vorgangsart = "FHZ"
            },
            new() {
                VKNR = "2606",
                IK = "101570104",
                Eingangsdatum = DateTime.Parse("09.12.2024"),
                Dienstleister = "DAVASO",
                Abweichung = "Satzart",
                Bemerkung = "L04 fehlt",
                Version = "002",
                MitarbeitendePerson = "---",
                Quarter = "2025/1",
                Vorgangsart = "FA"
            }
        };
    }
}