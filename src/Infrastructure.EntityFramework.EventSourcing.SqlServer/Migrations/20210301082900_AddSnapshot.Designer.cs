// <auto-generated />
using System;
using BridgingIT.DevKit.Infrastructure.EntityFramework.EventSourcing.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BridgingIT.DevKit.Infrastructure.EntityFramework.EventSourcing.SqlServer.Migrations
{
    [DbContext(typeof(EventStoreDbContext))]
    [Migration("20210301082900_AddSnapshot")]
    partial class AddSnapshot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("BridgingIT.DevKit.Infrastructure.EntityFramework.EventSourcing.Models.EventStoreAggregateEventForDatabase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AggregateVersion")
                        .HasColumnType("int");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId")
                        .HasDatabaseName("IX_AggregateEvent_AggregateId");

                    b.HasIndex("AggregateType")
                        .HasDatabaseName("IX_AggregateEvent_AggregateType");

                    b.HasIndex("AggregateId", "AggregateVersion")
                        .HasDatabaseName("IX_AggregateEvent_AggregateIDVersion");

                    b.HasIndex("AggregateId", "AggregateType", "AggregateVersion")
                        .IsUnique()
                        .HasDatabaseName("IX_AggregateEvent_IX_AggregateEvent_AggregateIDAggrTypeVers")
                        .HasFilter("[AggregateType] IS NOT NULL");

                    b.ToTable("AggregateEvent");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Infrastructure.EntityFramework.EventSourcing.Models.EventStoreSnapshotForDatabase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id", "AggregateType")
                        .IsUnique()
                        .HasFilter("[AggregateType] IS NOT NULL");

                    b.ToTable("Snapshot");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Infrastructure.EntityFramework.Outbox.Models.Outbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aggregate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AggregateEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<int>("RetryAttempt")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TimeStamp")
                        .HasDatabaseName("IX_EventstoreOutbox_TimeStamp");

                    b.ToTable("EventstoreOutbox");
                });
#pragma warning restore 612, 618
        }
    }
}
