// MIT-License
// Copyright BridgingIT GmbH - All Rights Reserved
// Use of this source code is governed by an MIT-style license that can be
// found in the LICENSE file at https://github.com/bridgingit/bitdevkit/license

namespace BridgingIT.DevKit.Infrastructure.EntityFramework;

public static class SqlStatements
{
    public static string CreateQuartzTables(string tablePrefix)
    {
        // source: https://github.com/quartznet/quartznet/blob/main/database/tables/tables_sqlite.sql
        return @$"
-- DROP TABLE IF EXISTS {tablePrefix}FIRED_TRIGGERS;
-- DROP TABLE IF EXISTS {tablePrefix}PAUSED_TRIGGER_GRPS;
-- DROP TABLE IF EXISTS {tablePrefix}SCHEDULER_STATE;
-- DROP TABLE IF EXISTS {tablePrefix}LOCKS;
-- DROP TABLE IF EXISTS {tablePrefix}SIMPROP_TRIGGERS;
-- DROP TABLE IF EXISTS {tablePrefix}SIMPLE_TRIGGERS;
-- DROP TABLE IF EXISTS {tablePrefix}CRON_TRIGGERS;
-- DROP TABLE IF EXISTS {tablePrefix}BLOB_TRIGGERS;
-- DROP TABLE IF EXISTS {tablePrefix}TRIGGERS;
-- DROP TABLE IF EXISTS {tablePrefix}JOB_DETAILS;
-- DROP TABLE IF EXISTS {tablePrefix}CALENDARS;
-- DROP TABLE IF EXISTS {tablePrefix}JOURNAL_TRIGGERS;

CREATE TABLE {tablePrefix}JOB_DETAILS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    JOB_NAME NVARCHAR(150) NOT NULL,
    JOB_GROUP NVARCHAR(150) NOT NULL,
    DESCRIPTION NVARCHAR(250) NULL,
    JOB_CLASS_NAME   NVARCHAR(250) NOT NULL,
    IS_DURABLE BIT NOT NULL,
    IS_NONCONCURRENT BIT NOT NULL,
    IS_UPDATE_DATA BIT  NOT NULL,
    REQUESTS_RECOVERY BIT NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE {tablePrefix}TRIGGERS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(150) NOT NULL,
    TRIGGER_GROUP NVARCHAR(150) NOT NULL,
    JOB_NAME NVARCHAR(150) NOT NULL,
    JOB_GROUP NVARCHAR(150) NOT NULL,
    DESCRIPTION NVARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT NULL,
    PREV_FIRE_TIME BIGINT NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE NVARCHAR(16) NOT NULL,
    TRIGGER_TYPE NVARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT NULL,
    CALENDAR_NAME NVARCHAR(200) NULL,
    MISFIRE_INSTR INTEGER NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
        REFERENCES {tablePrefix}JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE {tablePrefix}SIMPLE_TRIGGERS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(150) NOT NULL,
    TRIGGER_GROUP NVARCHAR(150) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES {tablePrefix}TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) ON DELETE CASCADE
);

CREATE TRIGGER DELETE_SIMPLE_TRIGGER DELETE ON {tablePrefix}TRIGGERS
BEGIN
    DELETE FROM {tablePrefix}SIMPLE_TRIGGERS WHERE SCHED_NAME=OLD.SCHED_NAME AND TRIGGER_NAME=OLD.TRIGGER_NAME AND TRIGGER_GROUP=OLD.TRIGGER_GROUP;
END
;

CREATE TABLE {tablePrefix}SIMPROP_TRIGGERS
  (
    SCHED_NAME NVARCHAR (120) NOT NULL ,
    TRIGGER_NAME NVARCHAR (150) NOT NULL ,
    TRIGGER_GROUP NVARCHAR (150) NOT NULL ,
    STR_PROP_1 NVARCHAR (512) NULL,
    STR_PROP_2 NVARCHAR (512) NULL,
    STR_PROP_3 NVARCHAR (512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC NULL,
    DEC_PROP_2 NUMERIC NULL,
    BOOL_PROP_1 BIT NULL,
    BOOL_PROP_2 BIT NULL,
    TIME_ZONE_ID NVARCHAR(80) NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES {tablePrefix}TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) ON DELETE CASCADE
);

CREATE TRIGGER DELETE_SIMPROP_TRIGGER DELETE ON {tablePrefix}TRIGGERS
BEGIN
    DELETE FROM {tablePrefix}SIMPROP_TRIGGERS WHERE SCHED_NAME=OLD.SCHED_NAME AND TRIGGER_NAME=OLD.TRIGGER_NAME AND TRIGGER_GROUP=OLD.TRIGGER_GROUP;
END
;

CREATE TABLE {tablePrefix}CRON_TRIGGERS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(150) NOT NULL,
    TRIGGER_GROUP NVARCHAR(150) NOT NULL,
    CRON_EXPRESSION NVARCHAR(250) NOT NULL,
    TIME_ZONE_ID NVARCHAR(80),
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES {tablePrefix}TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) ON DELETE CASCADE
);

CREATE TRIGGER DELETE_CRON_TRIGGER DELETE ON {tablePrefix}TRIGGERS
BEGIN
    DELETE FROM {tablePrefix}CRON_TRIGGERS WHERE SCHED_NAME=OLD.SCHED_NAME AND TRIGGER_NAME=OLD.TRIGGER_NAME AND TRIGGER_GROUP=OLD.TRIGGER_GROUP;
END
;

CREATE TABLE {tablePrefix}BLOB_TRIGGERS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(150) NOT NULL,
    TRIGGER_GROUP NVARCHAR(150) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES {tablePrefix}TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) ON DELETE CASCADE
);

CREATE TRIGGER DELETE_BLOB_TRIGGER DELETE ON {tablePrefix}TRIGGERS
BEGIN
    DELETE FROM {tablePrefix}BLOB_TRIGGERS WHERE SCHED_NAME=OLD.SCHED_NAME AND TRIGGER_NAME=OLD.TRIGGER_NAME AND TRIGGER_GROUP=OLD.TRIGGER_GROUP;
END
;

CREATE TABLE {tablePrefix}CALENDARS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    CALENDAR_NAME  NVARCHAR(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
);

CREATE TABLE {tablePrefix}PAUSED_TRIGGER_GRPS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_GROUP NVARCHAR(150) NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
);

CREATE TABLE {tablePrefix}FIRED_TRIGGERS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    ENTRY_ID NVARCHAR(140) NOT NULL,
    TRIGGER_NAME NVARCHAR(150) NOT NULL,
    TRIGGER_GROUP NVARCHAR(150) NOT NULL,
    INSTANCE_NAME NVARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    SCHED_TIME BIGINT NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE NVARCHAR(16) NOT NULL,
    JOB_NAME NVARCHAR(150) NULL,
    JOB_GROUP NVARCHAR(150) NULL,
    IS_NONCONCURRENT BIT NULL,
    REQUESTS_RECOVERY BIT NULL,
    PRIMARY KEY (SCHED_NAME,ENTRY_ID)
);

CREATE TABLE {tablePrefix}SCHEDULER_STATE
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    INSTANCE_NAME NVARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
);

CREATE TABLE {tablePrefix}LOCKS
  (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    LOCK_NAME  NVARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);

-- custom table to store the triger history
CREATE TABLE {tablePrefix}JOURNAL_TRIGGERS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    ENTRY_ID NVARCHAR(140) NOT NULL,
    TRIGGER_NAME NVARCHAR(150) NOT NULL,
    TRIGGER_GROUP NVARCHAR(150) NOT NULL,
    JOB_NAME NVARCHAR(150) NOT NULL,
    JOB_GROUP NVARCHAR(150) NOT NULL,
    DESCRIPTION NVARCHAR(250) NULL,
    START_TIME DATETIME NOT NULL,
    END_TIME DATETIME NULL,
    SCHEDULED_TIME DATETIME NOT NULL,
    DURATION_MS BIGINT NULL,
    STATUS NVARCHAR(16) NOT NULL,
    ERROR_MESSAGE TEXT NULL,
    JOB_DATA_JSON TEXT NULL,
    INSTANCE_NAME NVARCHAR(200) NULL,
    PRIORITY INTEGER NULL,
    RESULT TEXT NULL,
    RETRY_COUNT INTEGER NOT NULL DEFAULT 0,
    CATEGORY NVARCHAR(100) NULL,
    PRIMARY KEY (SCHED_NAME, ENTRY_ID)
);

CREATE INDEX IDX_{tablePrefix}JT_G_J ON {tablePrefix}JOURNAL_TRIGGERS(SCHED_NAME, JOB_GROUP, JOB_NAME);
CREATE INDEX IDX_{tablePrefix}JT_ST ON {tablePrefix}JOURNAL_TRIGGERS(SCHED_NAME, START_TIME DESC);
CREATE INDEX IDX_{tablePrefix}JT_STATUS ON {tablePrefix}JOURNAL_TRIGGERS(SCHED_NAME, STATUS);
CREATE INDEX IDX_{tablePrefix}JT_INST ON {tablePrefix}JOURNAL_TRIGGERS(SCHED_NAME, INSTANCE_NAME);
";
    }
}