@using BridgingIT.DevKit.Presentation.Web
@using BridgingIT.DevKit.Presentation.Web.IdentityProvider.Pages
@using BridgingIT.DevKit.Presentation.Web.Pages
@using Microsoft.AspNetCore.Http.HttpResults
@using RazorSlices
@inherits RazorSliceHttpResult<SigninViewModel>
@implements IUsesLayout<BridgingIT.DevKit.Presentation.Web.Pages._Layout, LayoutModel>

<div class="d-flex justify-content-between align-items-center py-2 mb-2 border-bottom">
    <h4 class="m-0">Sign in</h4>
    <div class="btn-group btn-group-sm">
        <button type="button" class="btn btn-outline-secondary" onclick="openConfiguration()" title="OpenID Configuration">
            <i class="bi bi-gear me-1"></i>Config
        </button>
        <button type="button" class="btn btn-outline-secondary" onclick="openDebugInfo()" title="Debug Info">
            <i class="bi bi-bug me-1"></i>Debug
        </button>
    </div>
</div>

@{
    var client = Model.Options?.Clients?.FirstOrDefault(c => c.ClientId == Model.Request.ClientId);
    var isValidRedirectUri = client?.RedirectUris?.Contains(Model.Request.RedirectUri) ?? false;
}

@if (client != null)
{
    <div class="card mb-2">
        <div class="card-body py-2">
            <div class="d-flex align-items-center">
                <h6 class="card-title m-0">@client.Name</h6>
                <span class="badge bg-primary ms-2">@Model.Options.TokenProvider</span>
            </div>
            @if (!isValidRedirectUri)
            {
                <div class="alert alert-danger mt-2 py-2 mb-0">
                    <div class="small">Invalid redirect_uri: @Model.Request.RedirectUri</div>
                    <div class="small mt-1">Configured URIs:</div>
                    <ul class="mb-0 small">
                        @foreach (var uri in client.RedirectUris)
                        {
                            <li>@uri</li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-danger py-2 mb-2">Invalid client_id: @Model.Request.ClientId</div>
}

@if (Model.Options.EnableUserCards && Model.Options?.Users?.Where(u => u.IsEnabled).Any() == true)
{
    <div class="row g-2 mb-2">
        @foreach (var user in Model.Options.Users.Where(u => u.IsEnabled))
        {
            <div class="col-12 col-md-6">
                <div class="card h-100" style="cursor: pointer" onclick="selectUser('@user.Email', '@user.Password')">
                    <div class="card-body p-2">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-person-circle fs-4 text-secondary"></i>
                            <div class="ms-2 flex-grow-1">
                                <div class="fw-medium">@user.Name</div>
                                <div class="text-muted small">@user.Email</div>
                                <div class="d-flex flex-wrap gap-1 mt-1">
                                    @foreach (var role in user.Roles)
                                    {
                                        <span class="badge bg-primary small">@role</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (Model.Options.EnableLoginCard)
{
    <div class="row justify-content-center">
        <div class="col-md-5">
            <div class="card">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-shield-lock fs-4 text-secondary me-2"></i>
                        <div class="small">
                            <div class="fw-medium">Manual Login</div>
                            <div class="text-muted">Enter email address</div>
                        </div>
                    </div>
                    <form onsubmit="submitLogin(event)">
                        <input type="email" class="form-control form-control-sm mb-2" id="username" placeholder="Email" required>
                        <input type="password" class="form-control form-control-sm mb-2" id="password" placeholder="Password (optional)">
                        <button type="submit" class="btn btn-primary btn-sm w-100">Login</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

<script>
    function openConfiguration() {
        window.open('/@Model.Options.GroupPath.Trim('/')/@Model.Options.EndpointPaths.WellKnownConfiguration?.Trim('/')', '_blank');
    }

    function openDebugInfo() {
        window.open('/@Model.Options.GroupPath.Trim('/')/@Model.Options.EndpointPaths.DebugInfo?.Trim('/')', '_blank');
    }

    function selectUser(email, password) {
        const params = new URLSearchParams(window.location.search);
        params.append('email', email);
        params.append('password', password);
        window.location.href = '/@Model.Options.GroupPath.Trim('/')/@Model.Options.EndpointPaths.AuthorizeCallback?.Trim('/')?' + params.toString();
    }

    function submitLogin(event) {
        event.preventDefault();
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const params = new URLSearchParams(window.location.search);
        params.append('email', username);
        params.append('password', password);
        window.location.href = '/@Model.Options.GroupPath.Trim('/')/@Model.Options.EndpointPaths.AuthorizeCallback?.Trim('/')?' + params.toString();
    }
</script>

@functions {
    public LayoutModel LayoutModel => new() { Title = "Sign in", HideSideBar = true };
}